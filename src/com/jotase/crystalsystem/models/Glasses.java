package com.jotase.crystalsystem.models;
// Generated Jul 4, 2015 1:37:22 PM by Hibernate Tools 3.6.0


import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;

/**
 * Glasses generated by hbm2java
 */
@Entity
@Table(name="glasses"
    ,catalog="cristal"
)
public class Glasses  implements java.io.Serializable {


     private GlassesId id;
     @NotNull (message = "Debe asignarle una orden")
     private Orderglass orderglass;
     private Date finishedDate;
     @NotNull (message = "Debe asignarle un estado")
     private int state;
     private Set replacements = new HashSet(0);

    public Glasses() {
    }

	
    public Glasses(GlassesId id, Orderglass orderglass, int state) {
        this.id = id;
        this.orderglass = orderglass;
        this.state = state;
    }
    public Glasses(GlassesId id, Orderglass orderglass, Date finishedDate, int state, Set replacements) {
       this.id = id;
       this.orderglass = orderglass;
       this.finishedDate = finishedDate;
       this.state = state;
       this.replacements = replacements;
    }
   
     @EmbeddedId

    
    @AttributeOverrides( {
        @AttributeOverride(name="id", column=@Column(name="id", nullable=false) ), 
        @AttributeOverride(name="orderGlassId", column=@Column(name="orderGlass_id", nullable=false) ), 
        @AttributeOverride(name="orderGlassBudgetId", column=@Column(name="orderGlass_budget_id", nullable=false) ), 
        @AttributeOverride(name="orderGlassBudgetCostumersId", column=@Column(name="orderGlass_budget_costumers_id", nullable=false) ) } )
    public GlassesId getId() {
        return this.id;
    }
    
    public void setId(GlassesId id) {
        this.id = id;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumns( { 
        @JoinColumn(name="orderGlass_id", referencedColumnName="id", nullable=false, insertable=false, updatable=false), 
        @JoinColumn(name="orderGlass_budget_id", referencedColumnName="budget_id", nullable=false, insertable=false, updatable=false), 
        @JoinColumn(name="orderGlass_budget_costumers_id", referencedColumnName="budget_costumers_id", nullable=false, insertable=false, updatable=false) } )
    public Orderglass getOrderglass() {
        return this.orderglass;
    }
    
    public void setOrderglass(Orderglass orderglass) {
        this.orderglass = orderglass;
    }

    @Temporal(TemporalType.DATE)
    @Column(name="FinishedDate", length=10)
    public Date getFinishedDate() {
        return this.finishedDate;
    }
    
    public void setFinishedDate(Date finishedDate) {
        this.finishedDate = finishedDate;
    }

    
    @Column(name="state", nullable=false)
    public int getState() {
        return this.state;
    }
    
    public void setState(int state) {
        this.state = state;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="glasses")
    public Set getReplacements() {
        return this.replacements;
    }
    
    public void setReplacements(Set replacements) {
        this.replacements = replacements;
    }




}


